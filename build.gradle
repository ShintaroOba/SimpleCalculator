plugins {
    id 'java'
    id 'application'
    id 'jacoco'
}

group = 'com.calculator'
version = '1.0.0'
java.sourceCompatibility = JavaVersion.VERSION_21  // Java 25 not yet supported by Gradle, using 21 for now

repositories {
    mavenCentral()
}

dependencies {
    // JUnit 5 for testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

application {
    mainClass = 'com.calculator.CalculatorApp'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/CalculatorApp.class'  // Exclude main class from coverage
            ])
        }))
    }
}

// Coverage verification - 50% requirement
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.50
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

jar {
    manifest {
        attributes(
            'Main-Class': 'com.calculator.CalculatorApp',
            'Implementation-Title': 'CLI Calculator',
            'Implementation-Version': version
        )
    }
    
    // Create a "fat jar" with all dependencies
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Task to run with arguments
task runWithArgs(type: JavaExec) {
    group = 'application'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.calculator.CalculatorApp'
    if (project.hasProperty('appArgs')) {
        args Eval.me(appArgs)
    }
}

// Performance and memory settings for production
tasks.withType(JavaExec) {
    jvmArgs = [
        '-Xmx128m',  // Maximum 128MB memory as per requirement
        '-XX:+UseG1GC',  // Use G1 garbage collector for better performance
        '-XX:MaxGCPauseMillis=50'  // Optimize for low latency
    ]
}
